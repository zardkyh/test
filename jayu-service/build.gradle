buildscript {
    ext {
        groupId = "jayuroun"
        versionName = "1.0.0"
        springBootVersion = '2.5.4'
        dependencyManagementVersion = '1.0.11.RELEASE'
        springCloudVersion = "2020.0.3"

        junitVersion = "5.7.1"
        lombokVersion = "1.18.12"

        // for QueryDSL
        queryDslVersion = '4.4.0'
        querydslPluginVersion = '1.0.10'
        h2Version = "1.4.200"

        restDocsVersion = "2.0.5.RELEASE"
        jacksonVersion = "2.11.4"

        asciidoctorVersion = "3.3.2"
    }

    repositories {
        mavenCentral()
        // for QueryDSL
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:${asciidoctorVersion}"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm-pdf:${asciidoctorVersion}"
        // for QueryDSL
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}"
    }
}


allprojects {
    group = groupId
    version = versionName
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    // 설명1
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: "org.asciidoctor.jvm.pdf"

    targetCompatibility = 11
    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'org.springframework.boot:spring-boot-starter-test'

    }

    // 설명
    ext {
        snippetsDir = file('build/generated-snippets')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    // 설명
    asciidoctor {
        inputs.dir snippetsDir
        dependsOn test
    }

    // 설명
    configurations {
        asciidoctorExtensions // dependencies 에서 적용한 것 추가
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

}

project(':core-module') {
    dependencies {

        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation('org.springframework.boot:spring-boot-starter-data-jpa')
        implementation 'org.springframework.boot:spring-boot-starter-security'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        implementation 'org.springframework.boot:spring-boot-starter-mail'
        implementation('org.springframework.boot:spring-boot-starter-logging')
        implementation "org.springframework.boot:spring-boot-configuration-processor"
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
        implementation group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.3.1'

        // PostgreSQL
//        runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

        // Microsoft SQL Server
        runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'

        // for QueryDSL
        implementation "com.querydsl:querydsl-core:${queryDslVersion}"
        implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
        annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    }
}


project(':auth-module') {
    dependencies {
        compile project(':core-module')
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    }
}

project(':common-module') {

    dependencies {
        compile project(':core-module')
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-amqp'
        implementation group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '3.0.4'

        implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'
        implementation 'com.google.code.gson:gson:2.8.5'
        implementation 'io.jsonwebtoken:jjwt:0.9.1'

        //querydsl
        implementation "com.querydsl:querydsl-core:${queryDslVersion}"
        //querydsl 추가
        implementation 'com.querydsl:querydsl-jpa'
        //querydsl 추가
        implementation 'com.querydsl:querydsl-apt'
        annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"


        // h2
        // compileOnly "com.h2database:h2:${h2Version}"

        // PostgreSQL
        runtimeOnly     'org.postgresql:postgresql'

        // 설명
        // asciidoctor
        implementation "org.springframework.restdocs:spring-restdocs-asciidoctor"
        asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

        // 설명
        // test
        testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:${restDocsVersion}"
        testImplementation('org.springframework.security:spring-security-test')
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testAnnotationProcessor 'org.projectlombok:lombok'
        // testImplementation "com.h2database:h2:${h2Version}"
    }

    // 설명
//    asciidoctor {
//        attributes 'pdf-fontsdir': file('src/docs/fonts')
//        attributes 'pdf-stylesdir': file('src/docs/themes')
//        attributes 'pdf-style': 'SourceHanSerifCN'
//
//        configurations 'asciidoctorExtensions'
//
//        sources{
//            include("**/*.adoc","**/common/*.adoc")
//        }
//
//        // baseDirFollowsSourceDir()
//        outputs.upToDateWhen { false }
//        outputOptions {
//            backends = ['html5', 'pdf']
//        }
//
//        inputs.dir snippetsDir
//        dependsOn test
//
//        baseDirFollowsSourceFile()
//    }
//
//    asciidoctor.doFirst {
//        delete file('src/main/resources/static/docs')
//    }
//
//    task copyAsciidoc(type: Copy) {
//        dependsOn asciidoctor
//        from file("${buildDir}/docs/asciidoc/html5")
//        into file("src/main/resources/static/docs")
//    }
//
//    test {
//        outputs.dir snippetsDir
//        useJUnitPlatform()
//    }
//
//    build {
//        dependsOn copyAsciidoc
//    }

    // 설명 가장 중요해요
    // 오류 무시
    tasks.withType(Test) {
        systemProperty 'eureka.client.enabled', 'false'

    }

}

project(':eureka-module') {
    dependencies {

        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    }
}

project(':gate-module') {
    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    }
}



// custom begin

// custom end

// for QueryDSL
task cleanGeneatedDir(type: Delete) {
    delete file('src/main/generated')
}

